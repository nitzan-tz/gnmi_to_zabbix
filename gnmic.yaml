username: user
password: secret
insecure: true
# encoding should be proto as json_val (The defult ) doesnt include type of value (float, int ...) 
encoding: proto
log: true
#debug: true

targets:
  10.1.1.1:50051:
    name: mx204
    subscriptions:
      - port_stats
      - bgp_state
      - system_facts
      - firewall

subscriptions:
  port_stats:
    paths:
      - "/interfaces/interface/state/"
      - "/interfaces/interface/subinterfaces/subinterface/state/"
    stream-mode: sample
    sample-interval: 30s
  bgp_state:
    paths:
       - "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/session-state"
    stream-mode: on-change
  system_facts:
    paths:
       - "/junos/system/linecard/environment/"
       - "/junos/system/linecard/ddos/"
    stream-mode: sample
    sample-interval: 60s
  firewall:
    paths:
      - "/junos/system/linecard/firewall/"
    stream-mode: sample
    sample-interval: 30s


outputs:
  prometheus-output:
    type: prometheus # required
    # address to listen on for incoming scrape requests
    listen: :9804 
    # path to query to get the metrics
    path: /metrics 
    # maximum lifetime of metrics in the local cache, #
    # a zero value defaults to 60s, a negative duration (e.g: -1s) disables the expiration
    expiration: 60s 
    # a string to be used as the metric namespace
    metric-prefix: "" 
    # a boolean, if true the subscription name will be appended to the metric name after the prefix
    append-subscription-name: false 
    # boolean, if true the message timestamp is changed to current time
    override-timestamps: false
    # a boolean, enables exporting timestamps received from the gNMI target as part of the metrics
    export-timestamps: false 
    # a boolean, enables setting string type values as prometheus metric labels.
    strings-as-labels: false
    # see https://gnmic.openconfig.net/user_guide/caching/, 
    # if enabled, the received gNMI notifications are stored in a cache.
    # the prometheus metrics are generated at the time a prometheus server sends scrape request.
    # this behavior allows the processors (if defined) to be run on all the generated events at once.
    # this mode uses more resource compared to the default one, but offers more flexibility when it comes 
    # to manipulating the data to customize the returned metrics using event-processors.
    cache:
    # duration, scrape request timeout.
    # this timer is started when a scrape request is received, 
    # if it is reached, the metrics generation/collection is stopped.
    timeout: 10s
    # enable debug for prometheus output
    debug: false 
    # string, one of `overwrite`, `if-not-present`, ``
    # This field allows populating/changing the value of Prefix.Target in the received message.
    # if set to ``, nothing changes 
    # if set to `overwrite`, the target value is overwritten using the template configured under `target-template`
    # if set to `if-not-present`, the target value is populated only if it is empty, still using the `target-template`
    add-target: 
    # string, a GoTemplate that allow for the customization of the target field in Prefix.Target.
    # it applies only if the previous field `add-target` is not empty.
    # if left empty, it defaults to:
    # {{- if index . "subscription-target" -}}
    # {{ index . "subscription-target" }}
    # {{- else -}}
    # {{ index . "source" | host }}
    # {{- end -}}`
    # which will set the target to the value configured under `subscription.$subscription-name.target` if any,
    # otherwise it will set it to the target name stripped of the port number (if present)
    target-template:
    # list of processors to apply on the message before writing
    event-processors: 
    # an integer, sets the number of worker handling messages to be converted into Prometheus metrics
    num-workers: 1

processors:
  # processor name
  path-base-processor:
    # processor type
    event-strings:
      value-names:
        - ".*"
      transforms:
        # strings function name
        - path-base:
            apply-on: "name"
  convert-to-float-processor:
    event-convert:
      # list of regex to be matched with the values names
      value-names: 
        - "xxxx$"
      # the desired value type, one of: int, uint, string, float, bool
      type: float
  convert-to-uint-processor:
      # The value of init-time can be uint or float and influx reject all insert if it change so I force it to float
    event-convert:
      # list of regex to be matched with the values names
      value-names:
        - "yyyy$"
      # the desired value type, one of: int, uint, string, float, bool
      type: uint
  convert-to-int-processor:
      # The value of init-time can be uint or float and influx reject all insert if it change so I force it to float
    event-convert:
      # list of regex to be matched with the values names
      value-names:
        - "physical-channel$"
      # the desired value type, one of: int, uint, string, float, bool
      type: int
